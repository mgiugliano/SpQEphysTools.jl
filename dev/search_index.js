var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SpQEphysTools","category":"page"},{"location":"#SpiQ","page":"Home","title":"SpiQ","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SpQEphysTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"List of functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"extract_peaks(xf::Array{Float32,1}, thr::Float32, dpre::Float32, dpost::Float32, ref::Float32, event::Int64, srate::Float32)\nprepare_bandpass(lowcut::Float32, highcut::Float32, fs::Float32)::ZPG\nbandpass(data::Array{Float32,1}, filt::ZPG)\nprepare_lowpass(cutoff::Float32, fs::Float32)\nlowpassanddec(data::Array{Float32,1}, filt::ZPG, rate::Float32, fs::Float32)\nallocateFloat32vector(numelements::Int64)\nmeminfo_julia()\npreproc_chan(fname::String, chan::Int, datasetname::String)\nparsetomlfiles(OUTPUT)::settings\ntideup_output(OUTPUT)\nreport(text::String, filename::String)\nactive_el(filename::String, threshold::Float64)::Int\nextract_bursts(pathname::String, nActiveEl::Int, ref::Float64)::Int\nplot_raster(pathname::String, fraction::Float64=1.0, title::Bool=false)::Int\nplot_frequencies(pathname::String, fraction::Float64=1.0, title::Bool=false)::Int","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SpQEphysTools]","category":"page"},{"location":"#SpQEphysTools.allocate_Float32vector-Tuple{Int64}","page":"Home","title":"SpQEphysTools.allocate_Float32vector","text":"allocate_Float32vector(num_elements::Int64)\n\nAllocate a Float32 vector of a given size, handling OutOfMemoryError exceptions\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.bandpass-Tuple{Vector{Float32}, DSP.Filters.ZeroPoleGain{:z, ComplexF32, ComplexF32, Float32}}","page":"Home","title":"SpQEphysTools.bandpass","text":"bandpass(data::Array{Float32,1}, lowcut::Float32, highcut::Float32, fs::Float32)\n\nThis function applies a bandpass filter to the input data. It receives the data (as a 1D array of Float32),\nand the filter parameters previously defined by prepare_bandpass. It returns the filtered data.\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.extract_bursts-Tuple{String, Int64, Float64}","page":"Home","title":"SpQEphysTools.extract_bursts","text":"extract_bursts(pathname::String, nActiveEl::Int)::Int\n\nDetect the bursts as in Van Pelt et al., 2004; IEEE Trans. Biomed. Eng., 51(11):2051-62. Alternatively, it uses a fixed threshold to detect the bursts, ignoring combined effect of an increase in the firing rate and an increase in the number of channels simultaneously active.\n\nArguments\n\npathname::String : path to the folder containing the spike times and the configuration files (the pre-processed *.dat folder)\nnActiveEl::Int : number of active electrodes \n\nAuthor(s)\n\nMichele Giugliano - michele.giugliano@unimore.it\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.extract_peaks-Tuple{Vector{Float32}, Float32, Float32, Float32, Float32, Int64, Float32}","page":"Home","title":"SpQEphysTools.extract_peaks","text":"extract_peaks(xf::Array{Float32,1}, thr::Float32, dpre::Float32, dpost::Float32, ref::Float32, event::Int64, srate::Float32)\n\nPerforms a threshold crossing detection on a given signal (xf), and extracts the peaks of the signal in terms of their\nindex/time of occurrence and \"polarity\" (i.e., sign of the peak). The function is designed to work with a single channel\nsignal, and it is used in the context of spike detection in electrophysiological recordings.\n\nArguments\n\nIt requires the following parameters:\n- `xf::Array{Float32,1}` : the signal to be analyzed.\n- `thr::Float32` : the threshold value for the detection.\n- `dpre::Float32` : the duration of the pre-event window (in ms), for storing the event waveform.\n- `dpost::Float32` : the duration of the post-event window (in ms), for storing the event waveform.\n- `ref::Float32` : the refractory period (in ms), to avoid multiple detections of the same event.\n- `event::Int64` : the type of event to be detected (1 for positive, -1 for negative, 0 for both).\n- `srate::Float32` : the sampling rate of the signal (in Hz).\n\nAuthor(s)\n\nMichele Giugliano - michele.giugliano@unimore.it\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.plot_frequencies","page":"Home","title":"SpQEphysTools.plot_frequencies","text":"plot_frequencies(pathname::String, fraction::Float64)\n\nPlot the distribution of firing rates, for each fraction of the total recording time. The function generates one or more PDF figures, storing them in the folder figs within the input pathname. If fraction is set to 1.0, then only one figure is generated, containing the entire recording time. Otherwise, multiple figures are generated, each containing a fraction of the total recording time.\n\nArguments\n\npathname::String : path to the folder containing the spike times and the configuration files (the pre-processed *.dat folder)\nfraction::Float64 : fraction of the total recording time (e.g. 0.1; must be in the range (0, 1)) (default: 1.0)\ntitle::Bool : if true, the title of the plot is the name of the folder (default: false)\n\nAuthor(s)\n\nMichele Giugliano - michele.giugliano@unimore.it\n\n\n\n\n\n","category":"function"},{"location":"#SpQEphysTools.plot_raster","page":"Home","title":"SpQEphysTools.plot_raster","text":"plot_raster(pathname::String, fraction::Float64)\n\nPlot the raster plot of the spike times, for each fraction of the total recording time. The function generates one or more PDF figures, storing them in the folder figs within the input pathname. If fraction is set to 1.0, then only one figure is generated, containing the entire recording time. Otherwise, multiple figures are generated, each containing a fraction of the total recording time.\n\nArguments\n\npathname::String : path to the folder containing the spike times and the configuration files (the pre-processed *.dat folder)\nfraction::Float64 : fraction of the total recording time (e.g. 0.1; must be in the range (0, 1)) (default: 1.0)\ntitle::Bool : if true, the title of the plot is the name of the folder (default: false)\n\nAuthor(s)\n\nMichele Giugliano - michele.giugliano@unimore.it\n\n\n\n\n\n","category":"function"},{"location":"#SpQEphysTools.prepare_bandpass-Tuple{Float32, Float32, Float32}","page":"Home","title":"SpQEphysTools.prepare_bandpass","text":"prepare_bandpass(lowcut::Float32, highcut::Float32, fs::Float32)\n\nThis function prepares (once for all) the bandpass filter to be used for spike detection/sorting.\nIt returns the filter object. It receives the low and high cutoff frequencies (in Hz) and the sampling rate (in Hz).\nIts purpose is to avoid redefining the filter at each call of the bandpass function.\nIts output is used as input to the bandpass function.\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.prepare_lowpass-Tuple{Float32, Float32}","page":"Home","title":"SpQEphysTools.prepare_lowpass","text":"prepare_lowpass(cutoff::Float32, fs::Float32)\n\nThis function prepares (once for all) the lowpass filter to be used for LFP extraction.\nIt returns the filter object. It receives the low cutoff frequency (in Hz) and the sampling rate (in Hz).\nIts purpose is to avoid redefining the filter at each call of the lowpass function.\nIts output is used as input to the lowpass function.\n\n\n\n\n\n","category":"method"},{"location":"#SpQEphysTools.preproc_chan-Tuple{String, Int64, String}","page":"Home","title":"SpQEphysTools.preproc_chan","text":"preproc_chan(fname, chan, datasetname)\n\nTBW\n\n\n\n\n\n","category":"method"}]
}
